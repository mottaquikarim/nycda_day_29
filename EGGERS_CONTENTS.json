{"home":{"content":"# Middleware and (Simple) Auth\n---\n\nWelcome to **Lecture 29**! Here's a brief class breakdown.\n\n## Learning Objectives\n1. What is middleware and why is it useful?\n2. How do we enable user authentication in our apps?\n\n## To Do Today\n\n### [Warmup](#warmup)\n### [Express Router](#express-router)\n### [User Auth](#user-auth)","idx":0},"title":{"content":"Middleware and (Simple) Auth","idx":1},"desc":{"content":"How do we organize our express routes?","idx":2},"warmup":{"content":"# Warmup\n\n# Warmup\n---\n\nLet's begin with a few short exercises.\n\n## Exercise 1\n\n**REQUIRED**\n\nGit clone our repo: **[NYCDA_todolist-express](https://github.com/mottaquikarim/NYCDA_todolist-express)**.\n\nTo do this, you must:\n\n1. Open up that link above and copy the URL\n2. In terminal, do the following\n\n```bash\n$ git clone [url_link]\n```\n\nThen, install all necessary dependencies:\n\n```bash\n$ cd NYCDA_todolist\n$ npm install\n```\n\n**Question**: what's the purpose of this again?\n\nFinally, run the server:\n\n```\n$ npm start\n```\n\n## Exercise 2\n\n**REQUIRED**\n\nNow, let's go ahead and implement the **PUT** and **DELETE** methods to complete our **express** app.\n\nWe want to make a request along the lines of:\n\n**PUT /api/todo/:id**\n\nThe **:id** represents **parameterized routing**. Basically, we want one or more of our route path items to be a variable that can be piped in. \n\n**EXAMPLE**:\n```bash\ncurl -X PUT -d '{\"isDone\": false}' \"http://localhost:3000/api/todo/1454141341\"\n```\n\n**RESPONSE**\n\nYour response should be the list of todos left.\n\nImplement this feature on both the **serverside** and the **clientside**.\n\n---\n\n**DELETE /api/todo/:id**\n\nThe **:id** represents **parameterized routing**. Basically, we want one or more of our route path items to be a variable that can be piped in. \n\n**EXAMPLE**:\n```bash\ncurl -X DELETE \"http://localhost:3000/api/todo/1454141341\"\n```\n\n**RESPONSE**\n\nYour response should be the list of todos left.\n\nImplement this feature on both the **serverside** and the **clientside**.\n\n\n","idx":3},"express-router":{"content":"# Express Router\n\nAllows your to define your routes independently of any sort of app instance. Super useful for breaking out different parts of a larger project. \n\n**[Great explanation](http://stackoverflow.com/a/33261362)** of **Express.Router()** in action.\n\n## Example\n\n**app.js** - the server itself\n```js\nconst express = require('express'),\n    dogs    = require('./routes/dogs'),\n    cats    = require('./routes/cats'),\n    birds   = require('./routes/birds');\n\nconst app = express();\n\napp.use('/dogs',  dogs);\napp.use('/cats',  cats);\napp.use('/birds', birds);\n\napp.listen(3000);\n```\n\n**dogs.js** - dog routes\n```js\nconst express = require('express');\n\nconst router = express.Router();\n\nrouter.get('/', (req, res) => {\n    res.send('GET handler for /dogs route.');\n});\n\nrouter.post('/', (req, res) => {\n    res.send('POST handler for /dogs route.');\n});\n\nmodule.exports = router;\n```\n\n## Middleware\n\nIMO, the secret sauce behind express. Just like **jQuery** has the rich ecosystem of plugins, **express** has a rich ecosystem of **middleware** that allows you to easily build a server system out of smaller pars.\n\n### Generic Middleware\nHere's a more raw example of middleware\n```js\n//middleware handlers look very similar to route handlers\napp.use((request, response, next) => {\n    //if we wanted to forbid query string usage,\n    //that could be done in middleware.\n    if(Object.keys(request.query).length > 0) {\n        response.status(400).send(\"You can't use query strings!\");\n    } else {\n        next();\n    }\n});\n```\n\nOther examples of middleware:\n1. **serve-static**: npm module that handles serving static files, much like we configured **/public** to always be server. **[Install](https://github.com/expressjs/serve-static)**\n2. **cookie-parser**: parses cookies for back and forth communication - we'll talk about this eventually.\n\n## Exercises\n\n1. Create middleware that disallows API calls to your server from anywhere except **localhost:3000**.\n2. Create middleware that returns your list of JSON.\n3. Create a way to store multiple **whitelisted** domain names that can use your API\n\n","idx":4},"user-auth":{"content":"# User Auth\n\nHow do we handle user authentication in a server?\n\n## Passport\n\nDocumentation **[here](http://passportjs.org/docs)**.\n\n## Installation\n\n```bash\n$ npm install --save passport\n```","idx":5},"__list__":["home","title","desc","warmup","express-router","user-auth"]}